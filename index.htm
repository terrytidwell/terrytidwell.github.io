<!DOCTYPE html>
<html>
  <head>
    <title></title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/buzz/1.1.10/buzz.min.js" type="text/javascript"></script>
    <script src="Assert.js" type="text/javascript"></script>
    <script src="TestingUtil.js"></script>
  </head>
  <body style="background-color: black;">
    <canvas tabindex='1' id="canvas" width="450" height="450"></canvas>
    <p><button onclick="runTests()">Run Tests</button></p>
    <div id="testOutput" style="color: limegreen;"></div>

    <script>
      //#######################################################################
      // The game

      var canvas;
      var ctx;
      var canvas_width;
      var canvas_height;
      var cell_width;
      var current_screen;

      var mouse_x = 0;
      var mouse_y = 0;
      var mouse_click_pending = false;

      var ColorEnum = {
        RED: 0,
        GREEN: 1,
        BLUE: 2
      };

      var ShapeEnum = {
        TRIANGLE: 0,
        CIRCLE: 1,
        SQUARE: 2
      };

      var FillEnum = {
        EMPTY: 0,
        STRIPED: 1,
        FULL: 2
      };

      //used for intro screen
      var set_text = ["S", "E", "T"];
      var set_shape = [];
      set_shape.push({shape: ShapeEnum.TRIANGLE, fill: FillEnum.FULL, color: ColorEnum.BLUE});
      set_shape.push({shape: ShapeEnum.SQUARE, fill: FillEnum.FULL, color: ColorEnum.RED});
      set_shape.push({shape: ShapeEnum.CIRCLE, fill: FillEnum.FULL, color: ColorEnum.GREEN});
      var floater = {x: 0, y: 0, dx: 1, dy: 1.6, fade: 100};
      var floater_card = randomCard();

      //used for game over screen
      var tile_change_timer = {active: true, period: 40, current: 0};
      var animation_cards = [];
      var temp_card = randomCard();
      animation_cards.push({x: Math.random() * canvas_width, y: Math.random() * canvas_height, card: temp_card});
      temp_card = randomCard();
      animation_cards.push({x: Math.random() * canvas_width, y: Math.random() * canvas_height, card: temp_card});
      temp_card = randomCard();
      animation_cards.push({x: Math.random() * canvas_width, y: Math.random() * canvas_height, card: temp_card});
      var scene_change_timer = {active: true, period: 40, current: 0};
      var game_over_fade_in_timer = {active: false, period: 40, current: 0};
      var fill_amount = 0;

      //set up for main game screen
      var cards = [];
      cards.push(randomCard());
      cards.push(randomCard());
      cards.push(randomCard());
      var currently_set = detectSet(cards);
      var user_guessing_set = false;
      var user_life = 50;
      var display_life = 50;
      var current_quota = 0;
      var quota_goal = 10;
      var total_sets = 0;
      var tile_change_timer = {active: true, period: 40, current: 0};
      var reaction_timer = {active: false, period: 10, current: 0};
      var success_timer = {active: false, period: 10, current: 0};
      var text_pulse_timer = {active: true, period: 20, current: 0};

      //---------------------------------------------------------------------
      function init()
      {
        //Canvas stuff
        canvas = $("#canvas")[0];
        ctx = canvas.getContext("2d");
        canvas_width = $("#canvas").width();
        canvas_height = $("#canvas").height();

        //Lets save the cell width in a variable for easy control
        cell_width = canvas_height / 19;

        canvas.addEventListener("mousedown", function (event)
        {
          var rect = canvas.getBoundingClientRect();
          mouse_x = event.clientX - rect.left;
          mouse_y = event.clientY - rect.top;
          mouse_click_pending = true;
        }, false);

        //can't do this until you've set up canvas_width and canvas_height
        animation_cards.push({x: canvas_width / 2, y: canvas_height / 2, card: {number: 1, shape: {shape: ShapeEnum.TRIANGLE, color: ColorEnum.BLUE, fill: FillEnum.STRIPED}}});
        Tutorial.init();
        ClassicZen.init();
        TitleScreen.init();
        TitleScreen.reset();
        current_screen = TitleScreen;

        // start processing events
        setTimeout(eventLoop, 40);
      }

      //---------------------------------------------------------------------
      function resetGame()
      {
        ctx.setTransform(1, 0, 0, 1, 0, 0);
        randomizeCard(cards[0]);
        randomizeCard(cards[1]);
        randomizeCard(cards[2]);
        currently_set = detectSet(cards);
        user_guessing_set = false;
        user_life = 50;
        display_life = 50;
        current_quota = 0;
        quota_goal = 10;
        total_sets = 0;
        tile_change_timer.active = true;
        /*
         Testing results:
         40 feels too slow
         30 feels good
         25 feels hard
         20 feels really hard
         */
        tile_change_timer.period = 40;
        tile_change_timer.current = 0;
        reaction_timer.active = false;
        reaction_timer.period = 10;
        reaction_timer.current = 0;
        success_timer.active = false;
        success_timer.period = 10;
        success_timer.current = 0;
        text_pulse_timer.active = true;
        text_pulse_timer.period = 20;
        text_pulse_timer.current = 0;
      }

      //---------------------------------------------------------------------
      function compareElements(a, b, c)
      {
        if (a == c)
        {
          if (a != b)
          {
            return false;
          }
        }
        else
        {
          if (a + b + c != 3)
          {
            return false;
          }
        }
        return true;
      }

      //---------------------------------------------------------------------
      function detectSet3Cards(card1, card2, card3)
      {
        return compareElements(card1.number - 1, card2.number - 1, card3.number - 1) &&
          compareElements(card1.shape.shape, card2.shape.shape, card3.shape.shape) &&
          compareElements(card1.shape.color, card2.shape.color, card3.shape.color) &&
          compareElements(card1.shape.fill, card2.shape.fill, card3.shape.fill);
      }
      
      //---------------------------------------------------------------------
      function detectSet(cards)
      {
        return compareElements(cards[0].number - 1, cards[1].number - 1, cards[2].number - 1) &&
          compareElements(cards[0].shape.shape, cards[1].shape.shape, cards[2].shape.shape) &&
          compareElements(cards[0].shape.color, cards[1].shape.color, cards[2].shape.color) &&
          compareElements(cards[0].shape.fill, cards[1].shape.fill, cards[2].shape.fill);
      }

      //---------------------------------------------------------------------
      function completingCard(card_to_change, card_left, card_right)
      {
        var number = card_left.number;
        if (card_left.number != card_right.number)
        {
          number = 6 - card_left.number - card_right.number;
        }
        card_to_change.number = number;
        completingShape(card_to_change.shape, card_left.shape, card_right.shape);
      }

      //---------------------------------------------------------------------
      function completingShape(shape_to_change, shape_left, shape_right)
      {
        var color = shape_left.color;
        if (shape_left.color != shape_right.color)
        {
          color = 3 - shape_left.color - shape_right.color;
        }
        var fill = shape_left.fill;
        if (shape_left.fill != shape_right.fill)
        {
          fill = 3 - shape_left.fill - shape_right.fill;
        }
        var shape = shape_left.shape;
        if (shape_left.shape != shape_right.shape)
        {
          shape = 3 - shape_left.shape - shape_right.shape;
        }
        shape_to_change.color = color;
        shape_to_change.fill = fill;
        shape_to_change.shape = shape;
      }

      //---------------------------------------------------------------------
      // Given two numbers in [0,2] choose an unchosen number
      function chooseAlternate(option1, option2)
      {
        if (option1 == option2)
        {
          //choose a number in [1,2]
          var step_size = Math.floor(Math.random() * 2 + 1);
          step_size += option1;
          if (step_size > 2)
          {
            return step_size - 3;
          }
          return step_size;
        }
        return 3 - option1 - option2;
      }

      //---------------------------------------------------------------------
      function assignCards(lhs_card,rhs_card)
      {
        lhs_card.number = rhs_card.number;
        lhs_card.shape.shape = rhs_card.shape.shape;
        lhs_card.shape.fill = rhs_card.shape.fill;
        lhs_card.shape.color = rhs_card.shape.color;
      }

      //---------------------------------------------------------------------
      function cardsEqual(card1, card2)
      {
        return card1.number == card2.number &&
          card1.shape.shape == card2.shape.shape &&
          card1.shape.fill == card2.shape.fill &&
          card1.shape.color == card2.shape.color;
      }

      //---------------------------------------------------------------------
      function evilRandom(shape_to_change, shape_left, shape_right)
      {
        var temp_shape =
        {
          number: shape_to_change.number,
          shape: {
            shape: shape_to_change.shape.shape,
            color: shape_to_change.shape.color,
            fill: shape_to_change.shape.fill
          }
        };
        completingCard(temp_shape, shape_left, shape_right);
        var num_element_to_change = Math.floor(Math.random() * 4);
        if (num_element_to_change == 0)
        {
          temp_shape.number = 1 + chooseAlternate(shape_to_change.number - 1, temp_shape.number - 1);
        }
        else if (num_element_to_change == 1)
        {
          temp_shape.shape.shape = chooseAlternate(shape_to_change.shape.shape, temp_shape.shape.shape);
        }
        else if (num_element_to_change == 2)
        {
          temp_shape.shape.fill = chooseAlternate(shape_to_change.shape.fill, temp_shape.shape.fill);
        }
        else if (num_element_to_change == 3)
        {
          temp_shape.shape.color = chooseAlternate(shape_to_change.shape.color, temp_shape.shape.color);
        }
        if (cardsEqual(temp_shape, shape_to_change))
        {
          alert("Equal card condition hit");
        }
        shape_to_change.number = temp_shape.number;
        shape_to_change.shape.shape = temp_shape.shape.shape;
        shape_to_change.shape.color = temp_shape.shape.color;
        shape_to_change.shape.fill = temp_shape.shape.fill;
      }

      //---------------------------------------------------------------------
      function randomizeCard(card)
      {
        //generate a 4 bit number, where all 4 bits aren't zero: thus
        //we need numbers in the range [1, 15]
        var num_elements_to_change = Math.floor(Math.random() * 15 + 1);
        if (num_elements_to_change >= 8)
        {
          card.number += Math.floor(Math.random() * 2 + 1);
          if (card.number > 3)
          {
            card.number -= 3;
          }
          num_elements_to_change -= 8;
        }
        if (num_elements_to_change >= 4)
        {
          card.shape.shape += Math.floor(Math.random() * 2 + 1);
          if (card.shape.shape > 2)
          {
            card.shape.shape -= 3;
          }
          num_elements_to_change -= 4;
        }
        if (num_elements_to_change >= 2)
        {
          card.shape.color += Math.floor(Math.random() * 2 + 1);
          if (card.shape.color > 2)
          {
            card.shape.color -= 3;
          }
          num_elements_to_change -= 2;
        }
        if (num_elements_to_change >= 1)
        {
          card.shape.fill += Math.floor(Math.random() * 2 + 1);
          if (card.shape.fill > 2)
          {
            card.shape.fill -= 3;
          }
          num_elements_to_change -= 1;
        }
      }

      //---------------------------------------------------------------------
      function randomCard()
      {
        return {number: Math.floor(Math.random() * 3 + 1), shape: randomShape()};
      }

      //---------------------------------------------------------------------
      function randomShape()
      {
        return {
          shape: Math.floor(Math.random() * 3),
          color: Math.floor(Math.random() * 3),
          fill: Math.floor(Math.random() * 3)
        };
      }

      //---------------------------------------------------------------------
      function paintCard(card, x, y, size)
      {
        var color = 'rgb(255,0,0)';
        if (card.shape.color == 1)
        {
          color = 'rgb(0,255,0)'
        }
        else if (card.shape.color == 2)
        {
          color = 'rgb(0,0,255)'
        }
        if (card.number == 1)
        {
          paintShape(card.shape, x, y, size);
        }
        else if (card.number == 2)
        {
          paintShape(card.shape, x + 0 * size / 5, y + size / 2 - size / 5, 2 * size / 5);
          paintShape(card.shape, x + 3 * size / 5, y + size / 2 - size / 5, 2 * size / 5);
        }
        else if (card.number == 3)
        {
          paintShape(card.shape, x + size / 2 - size / 5, y + 0 * size / 5, 2 * size / 5);
          paintShape(card.shape, x + 0 * size / 5, y + 3 * size / 5, 2 * size / 5);
          paintShape(card.shape, x + 3 * size / 5, y + 3 * size / 5, 2 * size / 5);
        }
      }

      //---------------------------------------------------------------------
      function paintShape(shape, x, y, size)
      {
        var color = 'rgb(255,0,0)';
        if (shape.color == 1)
        {
          color = 'rgb(0,255,0)'
        }
        else if (shape.color == 2)
        {
          color = 'rgb(0,0,255)'
        }
        paintShapeAndColor(shape, x, y, size, color);
      }

      //---------------------------------------------------------------------
      function paintShapeAndColor(shape, x, y, size, color)
      {
        ctx.strokeStyle = color;
        ctx.fillStyle = 'rgb(255,255,255)';
        if (shape.fill == FillEnum.FULL)
        {
          ctx.fillStyle = color;
        }
        ctx.lineWidth = size / 13;

        if (shape.shape == ShapeEnum.TRIANGLE)
        {
          ctx.beginPath();
          ctx.moveTo(x, y + size);
          ctx.lineTo(x + size / 2, y);
          ctx.lineTo(x + size, y + size);
          ctx.closePath();
          ctx.fill();
          ctx.beginPath();
          ctx.moveTo(x, y + size);
          ctx.lineTo(x + size / 2, y);
          ctx.lineTo(x + size, y + size);
          ctx.closePath();
          ctx.stroke();
          if (shape.fill == FillEnum.STRIPED)
          {
            for (var line_count = 1; line_count < 6; line_count++)
            {
              var fraction = Math.abs(line_count - 3);
              ctx.beginPath();
              ctx.moveTo(x + line_count * size / 6, y + fraction * size / 3);
              ctx.lineTo(x + line_count * size / 6, y + size);
              ctx.stroke();
            }
          }
        }

        else if (shape.shape == ShapeEnum.CIRCLE)
        {
          ctx.beginPath();
          ctx.moveTo(x + size, y + size / 2);
          ctx.arc(x + size / 2, y + size / 2, size / 2, 0, 2 * Math.PI, false);
          ctx.fill();
          ctx.beginPath();
          ctx.moveTo(x + size, y + size / 2);
          ctx.arc(x + size / 2, y + size / 2, size / 2, 0, 2 * Math.PI, false);
          ctx.stroke();
          if (shape.fill == FillEnum.STRIPED)
          {
            for (var line_count = 1; line_count < 6; line_count++)
            {
              var distance = size * Math.abs(line_count - 3) / 6;
              var half_height = Math.sqrt(size * size / 4 - distance * distance);
              var offset = size / 2 - half_height;
              ctx.beginPath();
              ctx.moveTo(x + line_count * size / 6, y + offset);
              ctx.lineTo(x + line_count * size / 6, y + size - offset);
              ctx.stroke();
            }
          }
        }

        else if (shape.shape == ShapeEnum.SQUARE)
        {
          ctx.fillRect(x, y, size, size);
          ctx.strokeRect(x, y, size, size);
          if (shape.fill == FillEnum.STRIPED)
          {
            for (var line_count = 1; line_count < 6; line_count++)
            {
              ctx.beginPath();
              ctx.moveTo(x + line_count * size / 6, y);
              ctx.lineTo(x + line_count * size / 6, y + size);
              ctx.stroke();
            }
          }
        }
      }

      //---------------------------------------------------------------------
      function updateCards()
      {
        var random_choice = 0;
        if (currently_set)
        {
          random_choice = Math.floor(Math.random() * 2 + 1);
        }
        else
        {
          random_choice = Math.floor(Math.random() * 3);
        }
        if (random_choice == 0)
        {
          var random_selection = Math.floor(Math.random() * 3);
          random_left = (random_selection + 1) % 3;
          random_right = (random_selection + 2) % 3;
          completingCard(cards[random_selection], cards[random_left], cards[random_right]);
          currently_set = detectSet(cards);
        }
        else if (random_choice == 1)
        {
          var random_selection = Math.floor(Math.random() * 3);
          random_left = (random_selection + 1) % 3;
          random_right = (random_selection + 2) % 3;
          evilRandom(cards[random_selection], cards[random_left], cards[random_right]);
          currently_set = detectSet(cards);
        }
        else
        {
          randomizeCard(cards[Math.floor(Math.random() * 3)]);
          currently_set = detectSet(cards);
        }
      }
      
      //---------------------------------------------------------------------
      var ClassicZen = {
        board : [],
        selected : [],
        selected_count : 0,
        //selection : [],
        current_candidate_index : [],
        user_life : 100,
        display_life : 0,

        //-------------------------------------------------------------------
        introduceSet:function(card0)
        {
          var random1 = Math.floor(Math.random()*11+1);
          var card1 = card0 + random1;
          while(card1 > 11)
          {
            card1 -= 12;
          }
          var random2 = Math.floor(Math.random()*10+1);
          random1 = random1 + random2 - 1;
          if (random1 > 11)
          {
            random1 -= 11;
          }
          random1 += 1;
          var card2 = card0 + random1;
          while(card2 > 11)
          {
            card2 -= 12;
          }
          completingCard(this.board[card0],
          this.board[card1],
          this.board[card2]);
        },
        
        //-------------------------------------------------------------------
        init:function()
        {
          for(var i = 0; i < 12; ++i)
          {
            this.board.push(randomCard());
            this.selected.push(false);
          }
          for(i = 0; i < 3; ++i)
          {
            this.current_candidate_index.push(0);
          }
          this.introduceSet(Math.floor(Math.random()*12));
        },
        
        //-------------------------------------------------------------------
        reset:function()
        {
          ctx.setTransform(1, 0, 0, 1, 0, 0);
          for(var i = 0; i < 12; ++i)
          {
            randomizeCard(this.board[i]);
            this.selected[i] = false;
          }
          this.selected_count = 0;
          this.introduceSet(Math.floor(Math.random()*12));
          total_sets = 0;
          this.user_life = 100;
          this.display_life = 0;
        },
        
        //-------------------------------------------------------------------
        handleMouseClick: function ()
        {
          if (mouse_y >= 16 * cell_width &&
            mouse_y <= 18 * cell_width &&
            mouse_x >= 16 * cell_width &&
            mouse_x <= 18 * cell_width)
          {
            PauseScreen.return_screen = ClassicZen;
            current_screen = PauseScreen;
            return;
          }
        
          var cell_x = Math.floor(mouse_x / cell_width);
          var cell_y = Math.floor(mouse_y / cell_width);
          
          cell_x -= 1;
          if(cell_x % 4 == 0 || cell_y % 4 == 0)
          {
            return;
          }
          cell_x /= 4;
          cell_y /= 4;
          cell_x = Math.floor(cell_x);
          cell_y = Math.floor(cell_y);
          if (cell_x < 0 ||
            cell_x > 3 ||
            cell_y < 0 ||
            cell_y > 2)
          {
            return;
          }
          var cell_count =cell_x*3+cell_y;
          
          if(!this.selected[cell_count])
          {
            if(this.selected_count >= 3)
            {
              return;
            }
            this.selected_count++;
          }
          else
          {
            this.selected_count--;
          }
          this.selected[cell_count] = !this.selected[cell_count];
        },
        
        //-------------------------------------------------------------------
        paint: function ()
        {
          if(this.selected_count == 3)
          {
            var current_count = 0;
            for(var i = 0; i < 12; ++i)
            {
              if(this.selected[i])
              {
                this.current_candidate_index[current_count] = i;
                current_count++;
              }
            }
            if(detectSet3Cards(this.board[this.current_candidate_index[0]],
              this.board[this.current_candidate_index[1]],
              this.board[this.current_candidate_index[2]]))
            {
              this.user_life += 20;
              if(this.user_life > 100)
              {
                this.user_life = 100;
              }
              total_sets++;
              var softball_card = Math.floor(Math.random() * 3);
              for(var i = 0; i < 3; ++i)
              {
                randomizeCard(this.board[this.current_candidate_index[i]]);
                this.selected[this.current_candidate_index[i]] = false;
                this.selected_count = 0;
              }
              this.introduceSet(this.current_candidate_index[softball_card]);
            }
          }
        
          ctx.fillStyle = "white";
          ctx.fillRect(0, 0, canvas_width, canvas_height);
          var count = 0;
          for(var x = 2; x < 18; x+=4)
          {
            for(var y = 1; y < 12; y+=4)
            {
              var random_x = 0;
              var random_y = 0; 
              if (this.selected[count])
              {
                random_x = Math.random()*6 - 3;
                random_y = Math.random()*6 - 3;
              }
              paintCard(this.board[count], x * cell_width + random_x, y * cell_width + random_y, 3 * cell_width);
              count++;
            }
          }
          
          random_x = 0;
          random_y = 0;
          if(this.user_life > this.display_life)
          {
            this.display_life += 3;
            if(this.display_life > 100)
            {
              this.display_life = 100;
            }
            if(this.display_life > this.user_life)
            {
              this.display_life = this.user_life;
            }
          }
          else
          {
            random_x = Math.random() - .5;
            random_y = Math.random() - .5;
            this.user_life-=.05;
            if(this.user_life < 0)
            {
              this.user_life = 0;
            }
            if(this.display_life > this.user_life)
            {
              this.display_life = this.user_life;
            }
            
          }
          
          ctx.fillStyle = "rgb(128, 0, 0)";
          ctx.fillRect(cell_width + random_x, 13 * cell_width+random_y, canvas_width - 2 * cell_width, cell_width);
          ctx.fillStyle = "rgb(0, 128, 0)";
          ctx.fillRect(cell_width + random_x, 13 * cell_width+random_y, (canvas_width - 2 * cell_width) * (this.display_life) / 100, cell_width);
          
          ctx.fillStyle = "rgb(255, 255, 255)";
          ctx.fillRect(16 * cell_width, 16 * cell_width, 2 * cell_width, 2 * cell_width);
          ctx.strokeStyle = "rgb(64, 64, 64)";
          ctx.lineWidth = 2;
          ctx.strokeRect(16 * cell_width, 16 * cell_width, 2 * cell_width, 2 * cell_width);
          ctx.fillStyle = "rgb(64, 64, 64)";
          ctx.fillRect(16 * cell_width + cell_width / 3, 16 * cell_width + 1 * cell_width / 4, cell_width / 3, 3 * cell_width / 2);
          ctx.fillRect(17 * cell_width + cell_width / 3, 16 * cell_width + 1 * cell_width / 4, cell_width / 3, 3 * cell_width / 2);
          
          ctx.fillStyle = "rgb(64,64,64)";
          ctx.textAlign = "start";
          ctx.textBaseline = "bottom";
          ctx.font = "800 " + 2 * cell_width + "px Arial";
          ctx.fillText(total_sets, cell_width, canvas_height - cell_width / 2);
          
          if(this.user_life <= 0)
          {
            current_screen = GameOverScreen;
          }
          
        }
      }
      
      //---------------------------------------------------------------------
      var Tutorial = {
        
        scratches : [],
        countdown : 4,
        second_countdown_timer : {active: true, period: 25, current: 0},
        title_sequence_timer : {active: false, period: 25, current: 0},
        slide_number : 0,
        demo_repeat_timer : {active: false, period: 25, current: 0},
        demo_sequence : 0,
        demo_cards : [],
        demo_text : [],
        reset_demo_cards : true,
        quiz_active : false,
        quiz_timer : {active: false, period: 75, current: 0},
        quiz_cards : [],
        quiz_answer : 0,
        quiz_correctly_answered : true,
        quiz_reaction_timer : {active: false, period: 50, current: 0},
        quiz_type : 0,
        
      
        //-------------------------------------------------------------------
        init: function ()
        {
          this.scratches.push({x_top: 30, x_stray:-5, age:0, active:100, period:170});
          this.scratches.push({x_top: 120, x_stray:5, age:0, active:150, period:190});
          this.demo_cards.push(randomCard());
          this.demo_cards.push(randomCard());
          this.demo_cards.push(randomCard());
          this.demo_text.push("");
          this.demo_text.push("");
          this.demo_text.push("");
          this.demo_text.push("");
          this.quiz_cards.push(randomCard());
          this.quiz_cards.push(randomCard());
          this.quiz_cards.push(randomCard());
          this.quiz_cards.push(randomCard());          
        },
        
        //-------------------------------------------------------------------
        reset: function ()
        {
          ctx.setTransform(1, 0, 0, 1, 0, 0);
          this.scratches[0].x_top = 30;
          this.scratches[0].x_stray = -5;
          this.scratches[0].age = 0; 
          this.scratches[0].active = 100;
          this.scratches[0].period = 170;
          this.scratches[1].x_top = 120;
          this.scratches[1].x_stray = 5;
          this.scratches[1].age = 0; 
          this.scratches[1].active = 150;
          this.scratches[1].period = 190;
          this.countdown = 4;
          this.second_countdown_timer.active = true;
          this.second_countdown_timer.current = 0;
          this.title_sequence_timer.active = false;
          this.title_sequence_timer.current = 0;
          this.slide_number = 0;
          this.demo_repeat_timer.active = false;
          this.demo_repeat_timer.current = 0;
          this.demo_sequence = 0;
          this.reset_demo_cards = true;
          this.quiz_active = false;
          this.quiz_timer.active = false;
          this.quiz_timer.current = 0;
          this.quiz_correctly_answered = true;
          this.quiz_reaction_timer.active = false;
          this.quiz_reaction_timer.current = 0;
        },
      
        //-------------------------------------------------------------------
        demoText: function (a, b, c, demo_text)
        {
          if(compareElements(a, b, c))
          {
            if(a == b)
            {
              return "Each element's " + demo_text + " is the same"
            }
            else
            {
              return "Each element's " + demo_text +  " is distinct"
            }
          }
          else
          {
            return "Each element's " + demo_text + " is neither the same nor distinct"
          }
        },
      
        //-------------------------------------------------------------------
        handleMouseClick: function ()
        {
          if(this.quiz_active &&
            !this.quiz_timer.active &&
            !this.quiz_reaction_timer.active &&
            mouse_y >= 13 * cell_width &&
            mouse_y <= 17 * cell_width)
          {
            var quiz_response = false;
            var quiz_response_value = 2;
            if(mouse_x >= 4 * cell_width &&
              mouse_x <= 8 * cell_width)
            {
              quiz_response = true;
              quiz_response_value = 2;
            }
            if(mouse_x >= 11 * cell_width &&
              mouse_x <= 15 * cell_width)
            {
              quiz_response = true;
              quiz_response_value = 3;
            }
            if(quiz_response)
            {
              this.quiz_reaction_timer.active = true;
              this.quiz_reaction_timer.current = 0;
              if(this.quiz_answer != quiz_response_value)
              {
                this.quiz_correctly_answered = false;
              }
              else
              {
                this.quiz_correctly_answered = true;
              }
            }
          }
          if((this.demo_repeat_timer.active ||
            this.quiz_active) &&
            mouse_y >= 16 * cell_width &&
            mouse_y <= 18 * cell_width &&
            mouse_x >= 16 * cell_width &&
            mouse_x <= 18 * cell_width)
          {
            resetGame();
            TitleScreen.reset();
            current_screen = TitleScreen;
          }
        },
        
        paint: function ()
        {
          ctx.fillStyle = "white";
          ctx.fillRect(0, 0, canvas_width, canvas_height);
          
          jiggle_x = Math.random() * 1;
          jiggle_y = Math.random() * 1;
          ctx.setTransform(1, 0, 0, 1, jiggle_x, jiggle_y);
          
          ctx.lineWidth = 5;
          ctx.strokeStyle = "rgb(0, 0, 0)";
          ctx.fillStyle = "rgb(128, 128, 128)";
          
          //fill
          if(this.second_countdown_timer.active)
          {
            this.second_countdown_timer.current++;
            if(this.second_countdown_timer.current >= this.second_countdown_timer.period)
            {
              this.second_countdown_timer.current = 0;
              this.countdown--;
              if(this.countdown == 0)
              {
                this.countdown = 1;
                this.second_countdown_timer.active = false;
                this.title_sequence_timer.active = true;
              }
            }
          
          
            ctx.beginPath();
            ctx.moveTo(canvas_width / 2, canvas_height / 2);
            ctx.lineTo(canvas_width / 2, -canvas_height / 2);
            var percent_covered = 1.5 + 2 * this.second_countdown_timer.current / this.second_countdown_timer.period;
            ctx.arc(canvas_width / 2, canvas_height / 2, canvas_height, 1.5*Math.PI, percent_covered*Math.PI);
            ctx.closePath();
            ctx.fill();
            ctx.beginPath();
            ctx.moveTo(canvas_width / 2, canvas_height / 2);
            ctx.lineTo(canvas_width / 2, -canvas_height / 2);
            var percent_covered = 1.5 + 2 * this.second_countdown_timer.current / this.second_countdown_timer.period;
            ctx.arc(canvas_width / 2, canvas_height / 2, canvas_height, 1.5*Math.PI, percent_covered*Math.PI);
            ctx.closePath();
            ctx.stroke();
            
            ctx.beginPath();
            ctx.moveTo(0,canvas_height / 2);
            ctx.lineTo(canvas_width, canvas_height / 2);
            ctx.stroke();
            ctx.beginPath();
            ctx.moveTo(canvas_width / 2, 0);
            ctx.lineTo(canvas_width / 2, canvas_height);
            ctx.stroke();
            
            ctx.beginPath();
            ctx.arc(canvas_width / 2, canvas_height / 2, 160, 0, 2*Math.PI);
            ctx.arc(canvas_width / 2, canvas_height / 2, 200, 0, 2*Math.PI);
            ctx.stroke();
            
            ctx.font="300px Arial";
            ctx.fillStyle = "rgb(0, 0, 0)";
            ctx.textAlign = "center";
            ctx.textBaseline = "middle";
            ctx.fillText(this.countdown, canvas_width / 2, canvas_height / 2);
          }
          
          if(this.title_sequence_timer.active)
          {
            this.title_sequence_timer.current++;
            if(this.title_sequence_timer.current >= this.title_sequence_timer.period)
            {
              this.title_sequence_timer.current = 0;
              this.slide_number += 1;
              if (this.slide_number > 64)
              {
                this.title_sequence_timer.active = false;
                this.quiz_timer.active = true;
                this.quiz_active = true;
                //this.demo_repeat_timer.active = true;
              }
            }
            if(this.slide_number >= 0 && this.slide_number < 3)
            {
              ctx.font="Bold 50px Arial";
              ctx.fillStyle = "rgb(0, 0, 0)";
              ctx.textAlign = "center";
              ctx.textBaseline = "middle";
              ctx.fillText("SETRONIC", canvas_width / 2, -25 + canvas_height / 2);
              ctx.fillText("INDUSTRIES", canvas_width / 2, 25 + canvas_height / 2);
              ctx.font="Bold 20px Arial";
              ctx.strokeStyle = "rgb(0, 0, 0)";
              ctx.lineWidth=3;
              ctx.beginPath();
              ctx.moveTo(cell_width, canvas_height - 3 * cell_width);
              ctx.lineTo(canvas_width - cell_width, canvas_height - 3 * cell_width);
              ctx.stroke();
              ctx.fillText("COPYRIGHT   MCMLI", canvas_width / 2, canvas_height - 2 * cell_width);
            }
            else if(this.slide_number >= 3 && this.slide_number < 6)
            {
              ctx.font="Bold 50px Arial";
              ctx.fillStyle = "rgb(0, 0, 0)";
              ctx.textAlign = "center";
              ctx.textBaseline = "middle";
              ctx.fillText("NEW EMPLOYEE", canvas_width / 2, -25 + canvas_height / 2);
              ctx.fillText("ORIENTATION", canvas_width / 2, 25 + canvas_height / 2);
              ctx.font="Bold 20px Arial";
              ctx.strokeStyle = "rgb(0, 0, 0)";
              ctx.lineWidth=3;
              ctx.beginPath();
              ctx.moveTo(cell_width, canvas_height - 3 * cell_width);
              ctx.lineTo(canvas_width - cell_width, canvas_height - 3 * cell_width);
              ctx.stroke();
              ctx.fillText("COPYRIGHT   MCMLI", canvas_width / 2, canvas_height - 2 * cell_width);
            }
            else if(this.slide_number >= 6 && this.slide_number < 9)
            {
              ctx.font="Bold 50px Arial";
              ctx.fillStyle = "rgb(0, 0, 0)";
              ctx.textAlign = "center";
              ctx.textBaseline = "middle";
              ctx.fillText("HOW TO", canvas_width / 2, -50 + canvas_height / 2);
              ctx.fillText("RECOGNIZE", canvas_width / 2,canvas_height / 2);
              ctx.fillText("A SET", canvas_width / 2, 50 + canvas_height / 2);
              ctx.font="Bold 20px Arial";
              ctx.strokeStyle = "rgb(0, 0, 0)";
              ctx.lineWidth=3;
              ctx.beginPath();
              ctx.moveTo(cell_width, canvas_height - 3 * cell_width);
              ctx.lineTo(canvas_width - cell_width, canvas_height - 3 * cell_width);
              ctx.stroke();
              ctx.fillText("COPYRIGHT   MCMLI", canvas_width / 2, canvas_height - 2 * cell_width);
            }
            else if(this.slide_number >= 10 && this.slide_number < 21)
            {
              ctx.font="Bold 16px Arial";
              ctx.fillStyle = "rgb(0, 0, 0)";
              ctx.textAlign = "center";
              ctx.textAlign = "top";
              ctx.fillText("Each Setronic set is composed of three elements.", canvas_width / 2, cell_width);
              if(this.slide_number > 11)
              {
                ctx.fillText("Each element has four qualities:", canvas_width / 2, 24 + cell_width);
              }
              if(this.slide_number >= 13 && this.slide_number < 15)
              {
                this.demo_cards[0] = {number:1, shape:{shape:ShapeEnum.SQUARE, color:ColorEnum.RED, fill:FillEnum.FULL}};
                this.demo_cards[1] = {number:1, shape:{shape:ShapeEnum.SQUARE, color:ColorEnum.BLUE, fill:FillEnum.FULL}};
                this.demo_cards[2] = {number:1, shape:{shape:ShapeEnum.SQUARE, color:ColorEnum.GREEN, fill:FillEnum.FULL}};
                for (var i = 0; i < 3; ++i)
                {
                  paintCard(this.demo_cards[i], cell_width * (i * 6 + 1), cell_width * 5, cell_width * 5);
                }
                ctx.font="Bold 16px Arial";
                ctx.fillStyle = "rgb(0, 0, 0)";
                ctx.fillText("FIG.1A COLOR", canvas_width / 2, cell_width * 11)
              }
              if(this.slide_number >= 15 && this.slide_number < 17)
              {
                this.demo_cards[0] = {number:1, shape:{shape:ShapeEnum.SQUARE, color:ColorEnum.BLUE, fill:FillEnum.FULL}};
                this.demo_cards[1] = {number:1, shape:{shape:ShapeEnum.TRIANGLE, color:ColorEnum.BLUE, fill:FillEnum.FULL}};
                this.demo_cards[2] = {number:1, shape:{shape:ShapeEnum.CIRCLE, color:ColorEnum.BLUE, fill:FillEnum.FULL}};
                for (var i = 0; i < 3; ++i)
                {
                  paintCard(this.demo_cards[i], cell_width * (i * 6 + 1), cell_width * 5, cell_width * 5);
                }
                ctx.font="Bold 16px Arial";
                ctx.fillStyle = "rgb(0, 0, 0)";
                ctx.fillText("FIG.1B SHAPE", canvas_width / 2, cell_width * 11)
              }
              if(this.slide_number >= 17 && this.slide_number < 19)
              {
                this.demo_cards[0] = {number:1, shape:{shape:ShapeEnum.SQUARE, color:ColorEnum.BLUE, fill:FillEnum.FULL}};
                this.demo_cards[1] = {number:1, shape:{shape:ShapeEnum.SQUARE, color:ColorEnum.BLUE, fill:FillEnum.STRIPED}};
                this.demo_cards[2] = {number:1, shape:{shape:ShapeEnum.SQUARE, color:ColorEnum.BLUE, fill:FillEnum.EMPTY}};
                for (var i = 0; i < 3; ++i)
                {
                  paintCard(this.demo_cards[i], cell_width * (i * 6 + 1), cell_width * 5, cell_width * 5);
                }
                ctx.font="Bold 16px Arial";
                ctx.fillStyle = "rgb(0, 0, 0)";
                ctx.fillText("FIG.1C FILL", canvas_width / 2, cell_width * 11)
              }
              if(this.slide_number >= 19 && this.slide_number < 21)
              {
                this.demo_cards[0] = {number:1, shape:{shape:ShapeEnum.SQUARE, color:ColorEnum.BLUE, fill:FillEnum.FULL}};
                this.demo_cards[1] = {number:2, shape:{shape:ShapeEnum.SQUARE, color:ColorEnum.BLUE, fill:FillEnum.FULL}};
                this.demo_cards[2] = {number:3, shape:{shape:ShapeEnum.SQUARE, color:ColorEnum.BLUE, fill:FillEnum.FULL}};
                for (var i = 0; i < 3; ++i)
                {
                  paintCard(this.demo_cards[i], cell_width * (i * 6 + 1), cell_width * 5, cell_width * 5);
                }
                ctx.font="Bold 16px Arial";
                ctx.fillStyle = "rgb(0, 0, 0)";
                ctx.fillText("FIG.1D QUANTITY", canvas_width / 2, cell_width * 11)
              }
            }
            else if(this.slide_number >= 21 && this.slide_number < 40)
            {
              ctx.font="Bold 16px Arial";
              ctx.fillStyle = "rgb(0, 0, 0)";
              ctx.fillText("A Setronic set is a group of three elements in which", canvas_width / 2, cell_width);
              if(this.slide_number >= 23)
              {
                ctx.fillText("Each element's quality is the same", canvas_width / 2, 24 + cell_width);
              }
              if(this.slide_number >= 24)
              {
                ctx.fillText("-OR-", canvas_width / 2, 48 + cell_width);
              }
              if(this.slide_number >= 25)
              {
                ctx.fillText("Each element's quality is distinct", canvas_width / 2, 72 + cell_width);
              }
              if(this.slide_number >= 27)
              {
                this.demo_cards[0] = {number:1, shape:{shape:ShapeEnum.SQUARE, color:ColorEnum.BLUE, fill:FillEnum.FULL}};
                this.demo_cards[1] = {number:2, shape:{shape:ShapeEnum.SQUARE, color:ColorEnum.BLUE, fill:FillEnum.FULL}};
                this.demo_cards[2] = {number:3, shape:{shape:ShapeEnum.SQUARE, color:ColorEnum.BLUE, fill:FillEnum.FULL}};
                for (var i = 0; i < 3; ++i)
                {
                  paintCard(this.demo_cards[i], cell_width * (i * 6 + 1), cell_width * 5, cell_width * 5);
                }
              }
              if(this.slide_number >= 27)
              {
                ctx.font="Bold 16px Arial";
                ctx.fillStyle = "rgb(0, 0, 0)";
                ctx.fillText("FIG.2A A SET", canvas_width / 2, 11 * cell_width);
              }
              if(this.slide_number >= 31)
              {
                ctx.fillText("Each element's color is the same", canvas_width / 2, 24 + 11 * cell_width);
              }
              if(this.slide_number >= 33)
              {
                ctx.fillText("Each element's shape is the same", canvas_width / 2, 48 + 11 * cell_width);
              }
              if(this.slide_number >= 35)
              {
                ctx.fillText("Each element's fill is the same", canvas_width / 2, 72 + 11 * cell_width);
              }
              if(this.slide_number >= 37)
              {
                ctx.fillText("Each element's quantity is distinct", canvas_width / 2, 96 + 11 * cell_width);
              }
            }
            else if(this.slide_number >= 40 && this.slide_number < 53)
            {
              if(this.slide_number >= 40)
              {
                this.demo_cards[0] = {number:1, shape:{shape:ShapeEnum.SQUARE, color:ColorEnum.BLUE, fill:FillEnum.FULL}};
                this.demo_cards[1] = {number:2, shape:{shape:ShapeEnum.SQUARE, color:ColorEnum.RED, fill:FillEnum.STRIPED}};
                this.demo_cards[2] = {number:3, shape:{shape:ShapeEnum.SQUARE, color:ColorEnum.GREEN, fill:FillEnum.EMPTY}};
                for (var i = 0; i < 3; ++i)
                {
                  paintCard(this.demo_cards[i], cell_width * (i * 6 + 1), cell_width * 5, cell_width * 5);
                }
              }
              if(this.slide_number >= 40)
              {
                ctx.font="Bold 16px Arial";
                ctx.fillStyle = "rgb(0, 0, 0)";
                ctx.fillText("FIG.2B A SET", canvas_width / 2, 11 * cell_width);
              }
              if(this.slide_number >= 44)
              {
                ctx.fillText("Each element's color is distinct", canvas_width / 2, 24 + 11 * cell_width);
              }
              if(this.slide_number >= 46)
              {
                ctx.fillText("Each element's shape is the same", canvas_width / 2, 48 + 11 * cell_width);
              }
              if(this.slide_number >= 48)
              {
                ctx.fillText("Each element's fill is distinct", canvas_width / 2, 72 + 11 * cell_width);
              }
              if(this.slide_number >= 50)
              {
                ctx.fillText("Each element's quantity is distinct", canvas_width / 2, 96 + 11 * cell_width);
              }
            }
            else if(this.slide_number >= 53 && this.slide_number < 64)
            {
              if(this.slide_number >= 53)
              {
                this.demo_cards[0] = {number:1, shape:{shape:ShapeEnum.SQUARE, color:ColorEnum.BLUE, fill:FillEnum.FULL}};
                this.demo_cards[1] = {number:2, shape:{shape:ShapeEnum.SQUARE, color:ColorEnum.RED, fill:FillEnum.STRIPED}};
                this.demo_cards[2] = {number:3, shape:{shape:ShapeEnum.SQUARE, color:ColorEnum.GREEN, fill:FillEnum.STRIPED}};
                for (var i = 0; i < 3; ++i)
                {
                  paintCard(this.demo_cards[i], cell_width * (i * 6 + 1), cell_width * 5, cell_width * 5);
                }
              }
              if(this.slide_number >= 53)
              {
                ctx.font="Bold 16px Arial";
                ctx.fillStyle = "rgb(0, 0, 0)";
                ctx.fillText("FIG.3B NOT A SET", canvas_width / 2, 11 * cell_width);
              }
              if(this.slide_number >= 57)
              {
                ctx.fillText("Each element's color is distinct", canvas_width / 2, 24 + 11 * cell_width);
              }
              if(this.slide_number >= 59)
              {
                ctx.fillText("Each element's shape is the same", canvas_width / 2, 48 + 11 * cell_width);
              }
              if(this.slide_number >= 61)
              {
                ctx.fillText("But each element's fill is neither the same nor distinct", canvas_width / 2, 72 + 11 * cell_width);
              }
            }
          }
          
          /*
          quiz_active = true;
          quiz_timer : {active: false, period: 50, current: 0},
          quiz_cards : [],
          quiz_answer : 0,
          */
          
          if(this.quiz_active)
          {
            if(this.quiz_timer.active)
            {
              if(this.quiz_timer.current == 0)
              {
                //reset things
                this.quiz_type = Math.round(Math.random());
                randomizeCard(this.quiz_cards[0]);
                randomizeCard(this.quiz_cards[1]);
                this.quiz_answer = Math.round(Math.random() + 2);
                var other_card = 3;
                if(this.quiz_answer == 3)
                {
                  other_card = 2;
                }
                completingCard(this.quiz_cards[this.quiz_answer],this.quiz_cards[0],this.quiz_cards[1]);
                evilRandom(this.quiz_cards[other_card],this.quiz_cards[0],this.quiz_cards[1]);
              }
              this.quiz_timer.current++;
              if(this.quiz_timer.current >= this.quiz_timer.period)
              {
                this.quiz_timer.current = this.quiz_timer.period;
                this.quiz_timer.active = false;
              }
            }
            
            var card_count = Math.floor(5*this.quiz_timer.current/this.quiz_timer.period);
            ctx.textAlign = "center";
            ctx.textAlign = "top";
            ctx.font="Bold 24px Arial";
            ctx.fillStyle = "rgb(0,0,0)";
            if (this.quiz_type == 0)
            {
              ctx.fillText("WHAT WOULD COMPLETE", canvas_width / 2, cell_width * 2);
              ctx.fillText("THE FOLLOWING?", canvas_width / 2, cell_width * 3);
            }
            else
            {
              ctx.fillText("IS THIS A SET?", canvas_width / 2, cell_width*2.5);
            }
            for (var i = 0; i < card_count && i < 2; ++i)
            {
              paintCard(this.quiz_cards[i], cell_width * (i * 6 + 1), cell_width * 5, cell_width * 5);
            }
            if (card_count > 2)
            {
              if (this.quiz_type == 0)
              {
                if (!this.quiz_reaction_timer.active)
                {
                  ctx.textAlign = "center";
                  ctx.textAlign = "top";
                  ctx.font= Math.round(cell_width * 5) + "px Arial";
                  ctx.fillStyle = "rgb(0, 0, 0)";
                  ctx.fillText("?", cell_width*15.5, cell_width*7.5);
                }
                else
                {
                  paintCard(this.quiz_cards[this.quiz_answer], cell_width * 13, cell_width * 5, cell_width * 5);
                }
              }
              else
              {
                paintCard(this.quiz_cards[2], cell_width * 13, cell_width * 5, cell_width * 5);
              }
            }
            //x: 4 - 8 11 - 15
            //y: 13 - 17
            if(this.quiz_type == 0)
            {
              for (i = 3; i < card_count && i < 5; ++i)
              {
                paintCard(this.quiz_cards[i-1], cell_width * (7 * i - 17), cell_width * 13, cell_width * 4);
              }
            }
            else
            {
              ctx.textAlign = "center";
              ctx.textAlign = "top";
              ctx.font= Math.round(cell_width * 4 / 3)  + "px Arial";
              ctx.fillStyle = "rgb(0, 0, 0)";
              if(card_count >= 4)
              {
                ctx.fillText("SET", cell_width*6, cell_width*15);
              }
              if(card_count >= 5)
              {
                ctx.fillText("NOT A", cell_width*13, cell_width*15 - (cell_width * 4 / 6));
                ctx.fillText("SET", cell_width*13, cell_width*15 + (cell_width * 4 / 6));
              }
            }
            if(this.quiz_reaction_timer.active)
            {
              this.quiz_reaction_timer.current++;
              if(this.quiz_reaction_timer.current >= this.quiz_reaction_timer.period)
              {
                this.quiz_reaction_timer.current = this.quiz_reaction_timer.period;
                this.quiz_reaction_timer.active = false;
                this.quiz_timer.current = 0;
                this.quiz_timer.active = true;
              }
              var response_text = "CORRECT!";
              if(!this.quiz_correctly_answered)
              {
                response_text = "SORRY, THAT IS INCORRECT.";
              }
              ctx.textAlign = "center";
              ctx.textAlign = "top";
              ctx.font="Bold 24px Arial";
              ctx.fillStyle = "rgb(0,0,0)";
              ctx.fillText(response_text,canvas_width/2, cell_width * 12);
            }
            ctx.fillStyle = "rgb(255, 255, 255)";
            ctx.fillRect(16 * cell_width, 16 * cell_width, 2 * cell_width, 2 * cell_width);
            ctx.strokeStyle = "rgb(64, 64, 64)";
            ctx.lineWidth = 2;
            ctx.strokeRect(16 * cell_width, 16 * cell_width, 2 * cell_width, 2 * cell_width);
            ctx.fillStyle = "rgb(64, 64, 64)";
            ctx.beginPath();
            ctx.moveTo(16 * cell_width + cell_width / 3, 16 * cell_width + 1 * cell_width / 4);
            ctx.lineTo(17 * cell_width + 2 * cell_width / 3, cell_width * 17);
            ctx.lineTo(16 * cell_width + cell_width / 3, 16 * cell_width + 7 * cell_width / 4);
            ctx.closePath();
            ctx.fill();
          }
          
          if (this.demo_repeat_timer.active)
          {
            if (this.reset_demo_cards)
            {
              this.reset_demo_cards = false;
              this.demo_text[0] = "This is";
              randomizeCard(this.demo_cards[0]);
              randomizeCard(this.demo_cards[1]);
              if(Math.random() < .5)
              {
                evilRandom(this.demo_cards[2], this.demo_cards[0], this.demo_cards[1]);
                this.demo_text[0] += " NOT a set";
              }
              else
              {
                completingCard(this.demo_cards[2], this.demo_cards[0], this.demo_cards[1]);
                this.demo_text[0] += " a set";
              }
              this.demo_text[4] = "quantity";
              this.demo_text[4] = this.demoText(this.demo_cards[0].number - 1, this.demo_cards[1].number - 1, this.demo_cards[2].number - 1, this.demo_text[4]);
              this.demo_text[2] = "shape";
              this.demo_text[2] = this.demoText(this.demo_cards[0].shape.shape, this.demo_cards[1].shape.shape, this.demo_cards[2].shape.shape, this.demo_text[2]);
              this.demo_text[1] = "color";
              this.demo_text[1] = this.demoText(this.demo_cards[0].shape.color, this.demo_cards[1].shape.color, this.demo_cards[2].shape.color, this.demo_text[1]);
              this.demo_text[3] = "fill";
              this.demo_text[3] = this.demoText(this.demo_cards[0].shape.fill, this.demo_cards[1].shape.fill, this.demo_cards[2].shape.fill, this.demo_text[3]);
            }
            
            this.demo_repeat_timer.current++;
            if (this.demo_repeat_timer.current >= this.demo_repeat_timer.period)
            {
              this.demo_repeat_timer.current = 0;
              this.demo_sequence += 1;
              
              if(this.demo_sequence >= 15)
              {
                this.demo_sequence = 0;
                this.reset_demo_cards = true;
              }
            }
            for (var i = 0; i < 3; ++i)
            {
              paintCard(this.demo_cards[i], cell_width * (i * 6 + 1), cell_width * 5, cell_width * 5);
            }
            ctx.fillStyle = "rgb(255, 255, 255)";
            ctx.fillRect(16 * cell_width, 16 * cell_width, 2 * cell_width, 2 * cell_width);
            ctx.strokeStyle = "rgb(64, 64, 64)";
            ctx.lineWidth = 2;
            ctx.strokeRect(16 * cell_width, 16 * cell_width, 2 * cell_width, 2 * cell_width);
            ctx.fillStyle = "rgb(64, 64, 64)";
            ctx.beginPath();
            ctx.moveTo(16 * cell_width + cell_width / 3, 16 * cell_width + 1 * cell_width / 4);
            ctx.lineTo(17 * cell_width + 2 * cell_width / 3, cell_width * 17);
            ctx.lineTo(16 * cell_width + cell_width / 3, 16 * cell_width + 7 * cell_width / 4);
            ctx.closePath();
            ctx.fill();
            for (var j = 0; j < 5; ++j)
            {
              if (this.demo_sequence >= j * 2 + 2)
              { 
                ctx.textAlign = "center";
                ctx.textAlign = "top";
                ctx.font="Bold 16px Arial";
                ctx.fillStyle = "rgb(0, 0, 0)";
                ctx.fillText(this.demo_text[j], canvas_width / 2, j * 24 + 11 * cell_width);
              }
            }
          }
          
          ctx.setTransform(1, 0, 0, 1, 0, 0);
          ctx.fillStyle = "rgb(0, 0, 0)";
          ctx.globalAlpha=0.25
          if(Math.random() < .15)
          {
            ctx.globalAlpha=0.35;
          }
          ctx.strokeStyle = "rgb(196, 196, 196)";
          ctx.fillSytle = ctx.strokeStyle;
          for(var j = 0; j < 1; j++)
          {
            ctx.beginPath();
            ctx.arc(Math.random()*canvas_height,Math.random()*canvas_height,2,0,2*Math.PI);
            ctx.fill();
          }
          ctx.lineWidth = 1;
          for(var j = 0; j < 2; j++)
          {
            this.scratches[j].age++;
            if(this.scratches[j].age >= this.scratches[j].period)
            {
              this.scratches[j].age = 0;
              this.scratches[j].x_top = Math.random() * canvas_width;
              this.scratches[j].x_stray = Math.random() * 9 - 4.5;
            }
            if(this.scratches[j].age < this.scratches[j].active && this.scratches[j].age % 10 != 0)
            {
              ctx.beginPath();
              ctx.moveTo(this.scratches[j].x_top,0);
              ctx.lineTo(this.scratches[j].x_top+this.scratches[j].x_stray,canvas_height);
              this.scratches[j].x_top += Math.random() * 7 - 3.5;
              this.scratches[j].x_stray += Math.random() * 2- 1;
              ctx.stroke();
            }
          }
          ctx.fillStyle = "rgb(0, 0, 0)";
          ctx.fillRect(0, 0, canvas_width, canvas_height);
          ctx.globalAlpha=1;
        }
      }
      
      //---------------------------------------------------------------------
      var TitleScreen = {

        second_level : false,
        transition_timer : {active: false, period: 15, current: 0},
        second_bounding_box : {
          offset_x: -600,
          offset_y : 40,
          zoom : 1.3,
          x: 600 / 1.3, 
          y: -40 / 1.3,
          width : 450 / 1.3,
          height: 450 / 1.3 },
        text1 : "Manufacturing",
        text2 : "Set QA",
        text1_width : 0,
        text2_width : 0,

        //-------------------------------------------------------------------
        init: function ()
        {
          ctx.textAlign = "center";
          ctx.textBaseline = "middle";
          ctx.font = "Bold 48px Arial";
          this.size_upper = ctx.measureText(this.text1).width;
          this.size_lower = ctx.measureText(this.text2).width;
        },
        
        //-------------------------------------------------------------------
        reset: function ()
        {
          ctx.setTransform(1, 0, 0, 1, 0, 0);
          this.second_level = false;
          this.transition_timer.active = false;
          this.transition_timer.current = 0;
        },
      
        //-------------------------------------------------------------------
        handleMouseClick: function ()
        {
          if (mouse_y >= 13 * cell_width &&
            mouse_y <= 15 * cell_width &&
            mouse_x >= 16 * cell_width &&
            mouse_x <= 18 * cell_width)
          {
            Tutorial.reset();
            current_screen = Tutorial;
          }
          if (this.second_level)
          {
            ctx.textAlign = "center";
            ctx.textBaseline = "middle";
            ctx.font = "Bold 48px Arial";
            if(mouse_y >= canvas_height/2 - 1 - 36 - 24 * 1.3 &&
              mouse_y <= canvas_height/2 - 1 - 36 + 24 * 1.3 &&
              mouse_x >= canvas_width/2 - 1 - this.size_upper / 2 * 1.3 &&
              mouse_x <= canvas_width/2 - 1 + this.size_upper / 2 * 1.3)
            {
              ClassicZen.reset();
              current_screen = ClassicZen;
            }
            if(mouse_y >= canvas_height/2 - 1 + 36 - 24 * 1.3 &&
              mouse_y <= canvas_height/2 - 1 + 36 + 24 * 1.3 &&
              mouse_x >= canvas_width/2 - 1 - this.size_lower / 2 * 1.3 &&
              mouse_x <= canvas_width/2 - 1 + this.size_lower / 2 * 1.3)
            {
              resetGame();
              current_screen = GameScreen;
            }
            return;
          }
          if (mouse_y >= 16 * cell_width &&
            mouse_y <= 18 * cell_width &&
            mouse_x >= 16 * cell_width &&
            mouse_x <= 18 * cell_width)
          {
            this.transition_timer.active = true;
            this.transition_timer.current = 0;
          }
        },

        //-------------------------------------------------------------------
        paint: function ()
        {
          ctx.setTransform(1, 0, 0, 1, 0, 0);
          //Lets paint the canvas now
          ctx.fillStyle = "white";
          ctx.fillRect(0, 0, canvas_width, canvas_height);
          if(this.transition_timer.active)
          {
            this.transition_timer.current++;
            if(this.transition_timer.current >= this.transition_timer.period)
            {
              this.transition_timer.current = this.transition_timer.period;
              this.second_level = true;
            }
          }
          
          var translate_x = this.second_bounding_box.offset_x * this.transition_timer.current/this.transition_timer.period;
          var translate_y = this.second_bounding_box.offset_y * this.transition_timer.current/this.transition_timer.period;
          var zoom = 1 + (this.second_bounding_box.zoom - 1) * this.transition_timer.current/this.transition_timer.period;

          //special translate instructions for floaters
          ctx.translate(translate_x * .3, translate_y * .3);
          ctx.scale(zoom , zoom);

          var other_color = Math.round(255 - ((1 - (Math.abs(floater.fade--) / 100)) * 64));
          var color = "rgb(255," + other_color + "," + other_color + ")";
          if (floater_card.shape.color == 1)
          {
            color = "rgb(" + other_color + ",255," + other_color + ")";
          }
          else if (floater_card.shape.color == 2)
          {
            color = "rgb(" + other_color + "," + other_color + ",255)";
          }
          paintShapeAndColor(floater_card.shape, floater.x += floater.dx / zoom, floater.y += floater.dy / zoom, 250, color);
          if (floater.fade < -100)
          {
            randomizeCard(floater_card);
            floater.x = Math.random() * 200 / zoom;
            floater.dx = .5 * Math.random() * 5 - 2;
            floater.y = Math.random() * 200 / zoom;
            floater.dy = .5 * Math.random() * 5 - 2;
            //alert(floater.x, floater.y);
            floater.fade = 100;
          }

          ctx.setTransform(1, 0, 0, 1, 0, 0);
          ctx.translate(translate_x, translate_y);
          ctx.scale(zoom, zoom);
          
          ctx.textAlign = "center";
          ctx.textBaseline = "middle";
          ctx.font = "900 120px Arial";

          for (var i = 0; i < 3; ++i)
          {
            paintShape(set_shape[i], cell_width * (i * 6 + 1), cell_width * 5, cell_width * 5);
            ctx.lineWidth = 4;

            ctx.fillStyle = "rgb(255, 255, 255)";
            ctx.fillText(set_text[i], cell_width * (i * 6 + 1) + cell_width * 5 / 2, cell_width * 5 + cell_width * 5 / 2);
            ctx.strokeText(set_text[i], cell_width * (i * 6 + 1) + cell_width * 5 / 2, cell_width * 5 + cell_width * 5 / 2);
          }

          paintShape({shape: ShapeEnum.CIRCLE, fill: FillEnum.FULL, color: ColorEnum.GREEN}, 225 - 120, 400, 300);
          ctx.translate(770,-100);
          ctx.rotate(10 * Math.PI / 180);
          paintShape({shape: ShapeEnum.SQUARE, fill: FillEnum.STRIPED, color: ColorEnum.GREEN}, -150, -150, 300);
          ctx.setTransform(1, 0, 0, 1, 0, 0);
          ctx.translate(translate_x, translate_y);
          ctx.scale(zoom, zoom);
          paintShape({shape: ShapeEnum.CIRCLE, fill: FillEnum.FULL, color: ColorEnum.RED}, 750 - 180, 220, 300);
          
          ctx.translate(0, 500);
          ctx.rotate(10 * Math.PI / 180);
          paintShape({shape: ShapeEnum.SQUARE, fill: FillEnum.STRIPED, color: ColorEnum.RED}, -150, -150, 300);
          ctx.setTransform(1, 0, 0, 1, 0, 0);
          ctx.translate(translate_x, translate_y);
          ctx.scale(zoom, zoom);
          ctx.translate(400, -100);
          ctx.rotate(-5 * Math.PI / 180);
          paintShape({shape: ShapeEnum.TRIANGLE, fill: FillEnum.EMPTY, color: ColorEnum.BLUE}, -150, -150, 300);
          ctx.setTransform(1, 0, 0, 1, 0, 0);
          ctx.translate(translate_x, translate_y);
          ctx.scale(zoom, zoom);

          /*
          second_bounding_box : {
          offset_x: -600,
          offset_y : 40,
          zoom : 1.3,
          x: 600 / 1.3, 
          y: -40 / 1.3,
          width : canvas_width / 1.3,
          height: canvas_height / 1.3 },
          */
          
          
          ctx.setTransform(1, 0, 0, 1, 0, 0);
          ctx.textAlign = "center";
          ctx.textBaseline = "middle";
          ctx.font = "Bold 48px Arial";
          ctx.fillStyle = "rgb(0,0,0)";
          
          ctx.translate(translate_x, translate_y);
          ctx.scale(zoom, zoom);
          
          var center_x = this.second_bounding_box.x + this.second_bounding_box.width / 2;
          var center_y = this.second_bounding_box.y + this.second_bounding_box.height / 2;


          ctx.fillStyle = "rgb(0,0,0)";
          ctx.fillText(this.text1, center_x, center_y - 72 / 2 / 1.3);
          ctx.fillText(this.text2, center_x, center_y + 72 / 2 / 1.3);

          ctx.fillStyle = "rgb(255, 255, 255)";
          ctx.fillRect(16 * cell_width, 13 * cell_width, 2 * cell_width, 2 * cell_width);
          ctx.strokeStyle = "rgb(64, 64, 64)";
          ctx.lineWidth = 2;
          ctx.strokeRect(16 * cell_width, 13 * cell_width, 2 * cell_width, 2 * cell_width);
          ctx.font = Math.round(2 * cell_width) + "px Arial";
          ctx.fillStyle = "rgb(64, 64, 64)";
          ctx.fillText("?", 17 * cell_width, 14 * cell_width);
          
          
          ctx.fillStyle = "rgb(255, 255, 255)";
          ctx.fillRect(16 * cell_width, 16 * cell_width, 2 * cell_width, 2 * cell_width);
          ctx.strokeStyle = "rgb(64, 64, 64)";
          ctx.lineWidth = 2;
          ctx.strokeRect(16 * cell_width, 16 * cell_width, 2 * cell_width, 2 * cell_width);
          ctx.fillStyle = "rgb(64, 64, 64)";
          ctx.beginPath();
          ctx.moveTo(16 * cell_width + cell_width / 3, 16 * cell_width + 1 * cell_width / 4);
          ctx.lineTo(17 * cell_width + 2 * cell_width / 3, cell_width * 17);
          ctx.lineTo(16 * cell_width + cell_width / 3, 16 * cell_width + 7 * cell_width / 4);
          ctx.closePath();
          ctx.fill();
        }
      };

      //---------------------------------------------------------------------
      var GameOverScreen = {

        //-------------------------------------------------------------------
        handleMouseClick: function ()
        {
          if(!scene_change_timer.active)
          {
            if (mouse_y >= 16 * cell_width &&
              mouse_y <= 18 * cell_width &&
              mouse_x >= 16 * cell_width &&
              mouse_x <= 18 * cell_width)
            {
              scene_change_timer.active = true;
              scene_change_timer.current = 0;
              game_over_fade_in_timer.active = false;
              game_over_fade_in_timer.current = 0;
              TitleScreen.reset();
              current_screen = TitleScreen;
            }
          }
        },

        //-------------------------------------------------------------------
        paint: function ()
        {
          if (scene_change_timer.current == 0)
          {
            game_over_fade_in_timer.active = false;
            game_over_fade_in_timer.current = 0;
            fill_amount = 0;
            for (var i = 0; i < 3; i++)
            {
              randomizeCard(animation_cards[i].card);
              animation_cards[i].x = Math.random() * canvas_width;
              animation_cards[i].y = Math.random() * canvas_height;
            }
          }

          if (scene_change_timer.active)
          {
            scene_change_timer.current++;
            if (scene_change_timer.current == scene_change_timer.period)
            {
              scene_change_timer.active = false;
              game_over_fade_in_timer.active = true;
              return;
            }
            
            var size = scene_change_timer.current;
            size *= size;
            size *= size;
            size *= .005;
            //alert(size);
            for (var i = 0; i < 4; i++)
            {
              paintShape(animation_cards[i].card.shape, animation_cards[i].x - size / 2, animation_cards[i].y - size / 2, size);
            }
          }
          
          if (game_over_fade_in_timer.active)
          {
            game_over_fade_in_timer.current++;
            if (game_over_fade_in_timer.current == game_over_fade_in_timer.period)
            {
              game_over_fade_in_timer.active = false;
            }
          }
          
          if (!scene_change_timer.active)
          {
            ctx.fillStyle = "rgb(0, 0, 255)";
            ctx.fillRect(0, 0, canvas_width, canvas_height);
            fill_amount = Math.round(255 * (game_over_fade_in_timer.current / game_over_fade_in_timer.period));
            ctx.fillStyle = "rgb(" + fill_amount + ", " + fill_amount + ", 255)";
            ctx.textAlign = "center";
            ctx.textBaseline = "middle";
            ctx.font = "800 120px Arial";
            ctx.fillText("game", canvas_width / 2, canvas_height * 0.382);
            ctx.fillText("over", canvas_width / 2, 90 + canvas_height * 0.382);
            
            ctx.font = "500 74px Arial";
            ctx.fillText("sets: "+total_sets, canvas_width / 2, 240 + canvas_height * 0.382);
            
            ctx.fillStyle = "rgb(255, 255, 255)";
            ctx.fillRect(16 * cell_width, 16 * cell_width, 2 * cell_width, 2 * cell_width);
            ctx.strokeStyle = "rgb(64, 64, 64)";
            ctx.lineWidth = 2;
            ctx.strokeRect(16 * cell_width, 16 * cell_width, 2 * cell_width, 2 * cell_width);
            ctx.fillStyle = "rgb(64, 64, 64)";
            ctx.beginPath();
            ctx.moveTo(16 * cell_width + cell_width / 3, 16 * cell_width + 1 * cell_width / 4);
            ctx.lineTo(17 * cell_width + 2 * cell_width / 3, cell_width * 17);
            ctx.lineTo(16 * cell_width + cell_width / 3, 16 * cell_width + 7 * cell_width / 4);
            ctx.closePath();
            ctx.fill();
          }
        }
      };

      //---------------------------------------------------------------------
      var PauseScreen = {
        return_screen : GameScreen,

        //-------------------------------------------------------------------
        handleMouseClick: function ()
        {
          if (mouse_y >= 16 * cell_width &&
            mouse_y <= 18 * cell_width &&
            mouse_x >= 16 * cell_width &&
            mouse_x <= 18 * cell_width)
          {
            current_screen = this.return_screen;
          }
        },

        //-------------------------------------------------------------------
        paint: function ()
        {
          //Lets paint the canvas now
          ctx.fillStyle = "white";
          ctx.fillRect(0, 0, canvas_width, canvas_height);

          var other_color = Math.round(255 - ((1 - (Math.abs(floater.fade--) / 100)) * 64));
          var color = "rgb(255," + other_color + "," + other_color + ")";
          if (floater_card.shape.color == 1)
          {
            color = "rgb(" + other_color + ",255," + other_color + ")";
          }
          else if (floater_card.shape.color == 2)
          {
            color = "rgb(" + other_color + "," + other_color + ",255)";
          }
          paintShapeAndColor(floater_card.shape, floater.x += floater.dx, floater.y += floater.dy, 250, color);
          if (floater.fade < -100)
          {
            randomizeCard(floater_card);
            floater.x = Math.random() * 200;
            floater.dx = .5 * Math.random() * 5 - 2;
            floater.y = Math.random() * 200;
            floater.dy = .5 * Math.random() * 5 - 2;
            floater.fade = 100;
          }

          paintShape({
            shape: ShapeEnum.CIRCLE,
            fill: FillEnum.FULL,
            color: ColorEnum.GREEN
          }, canvas_width / 2 - 300, canvas_height * 0.382 - 80, 260)
          paintShape({
            shape: ShapeEnum.CIRCLE,
            fill: FillEnum.FULL,
            color: ColorEnum.BLUE
          }, canvas_width / 2 + 100, canvas_height * 0.382 - 50, 160);
          paintShape({
            shape: ShapeEnum.SQUARE,
            fill: FillEnum.FULL,
            color: ColorEnum.RED
          }, canvas_width / 2 - 50, canvas_height * 0.382 - 80, 160);
          paintShape({
            shape: ShapeEnum.SQUARE,
            fill: FillEnum.FULL,
            color: ColorEnum.BLUE
          }, canvas_width / 2 - 100, canvas_height * 0.382 - 50, 100);

          ctx.textAlign = "center";
          ctx.textBaseline = "middle";
          ctx.fillStyle = "rgb(255, 255, 255)";
          ctx.font = "900 120px Arial";
          ctx.fillText("paused", canvas_width / 2, canvas_height * 0.382);

          ctx.fillStyle = "rgb(255, 255, 255)";
          ctx.fillRect(16 * cell_width, 16 * cell_width, 2 * cell_width, 2 * cell_width);
          ctx.strokeStyle = "rgb(64, 64, 64)";
          ctx.lineWidth = 2;
          ctx.strokeRect(16 * cell_width, 16 * cell_width, 2 * cell_width, 2 * cell_width);
          ctx.fillStyle = "rgb(64, 64, 64)";
          ctx.beginPath();
          ctx.moveTo(16 * cell_width + cell_width / 3, 16 * cell_width + 1 * cell_width / 4);
          ctx.lineTo(17 * cell_width + 2 * cell_width / 3, cell_width * 17);
          ctx.lineTo(16 * cell_width + cell_width / 3, 16 * cell_width + 7 * cell_width / 4);
          ctx.closePath();
          ctx.fill();

        }
      };

      //---------------------------------------------------------------------
      var GameScreen = {

        //-------------------------------------------------------------------
        handleMouseClick: function ()
        {
          if (mouse_y >= 16 * cell_width &&
            mouse_y <= 18 * cell_width &&
            mouse_x >= 16 * cell_width &&
            mouse_x <= 18 * cell_width)
          {
            PauseScreen.return_screen = GameScreen;
            current_screen = PauseScreen;
            return;
          }

          var x_distance = (canvas_width / 2 - mouse_x);
          x_distance *= x_distance;
          var y_distance = (canvas_height * .75 - mouse_y);
          y_distance *= y_distance;
          if (Math.sqrt(y_distance + x_distance) <= 10 + cell_width * 2.5)
          {
            user_guessing_set = !user_guessing_set;
          }
        },

        //-------------------------------------------------------------------
        paint: function ()
        {
          // clear the screen
          ctx.fillStyle = "white";
          ctx.fillRect(0, 0, canvas_width, canvas_height);

          for (var i = 0; i < 3; ++i)
          {
            paintCard(cards[i], cell_width * (i * 6 + 1), cell_width * 5, cell_width * 5);
          }

          if (tile_change_timer.active)
          {
            tile_change_timer.current++;
            if (tile_change_timer.current == tile_change_timer.period)
            {

              //fire tile_change_timer
              var require_reaction = false;
              if (user_guessing_set != currently_set)
              {
                user_life -= 20;
                if (user_life < 0)
                {
                  user_life = 0;
                }
                require_reaction = true;
              }
              else
              {
                if (currently_set)
                {
                  current_quota++;
                  total_sets++;
                  if(current_quota == quota_goal)
                  {
                    current_quota = 0;
                    quota_goal += 5;
                    tile_change_timer.period -= 5;
                  }
                  success_timer.active = true;
                  success_timer.current = 0;
                  user_life += 5;
                  if (user_life > 100)
                  {
                    user_life = 100;
                  }
                }
              }

              if (require_reaction)
              {
                tile_change_timer.active = false;
                //start the reaction timer
                reaction_timer.current = 0;
                reaction_timer.active = true;
              }
              else
              {
                updateCards();
                tile_change_timer.current = 0;
              }


              user_guessing_set = false;
            }
          }

          var life_color = "rgb(0,128,0)";
          if (success_timer.active)
          {
            success_timer.current++;
            life_color = "rgb(0," + Math.round(255 - 255 * Math.abs(success_timer.current / success_timer.period - .5)) + ",0)";
            if (success_timer.current == success_timer.period)
            {

              success_timer.active = false;
            }
          }

          var random_x_jitter = 0;
          var random_y_jitter = 0;
          if (reaction_timer.active)
          {
            reaction_timer.current++;
            if (reaction_timer.current == reaction_timer.period)
            {
              reaction_timer.active = false;
              tile_change_timer.current = 0;
              tile_change_timer.active = true;
              updateCards();
            }
            random_x_jitter = Math.random() * 9 - 4;
            random_y_jitter = Math.random() * 9 - 4;
          }

          if (user_guessing_set)
          {
            ctx.beginPath();
            ctx.fillStyle = "rgb(0,255,0)";
            ctx.lineWidth = 1;
            ctx.arc(canvas_width / 2, canvas_height * .75, 2.1 * cell_width, 0, Math.PI * 2, false);
            ctx.fill();
          }

          ctx.beginPath();
          ctx.strokeStyle = "rgb(64,64,64)";
          ctx.lineWidth = 20;
          ctx.arc(canvas_width / 2, canvas_height * .75, cell_width * 2.5, 0, Math.PI * 2, false);
          ctx.stroke();
          ctx.fillStyle = "rgb(128,128,128)";
          ctx.beginPath();
          ctx.strokeStyle = "rgb(128,128,128)";
          ctx.lineWidth = 20;
          ctx.arc(canvas_width / 2, canvas_height * .75, cell_width * 2.5, -Math.PI / 2, Math.PI * 2 * tile_change_timer.current / tile_change_timer.period - Math.PI / 2, false);
          ctx.stroke();

          if (text_pulse_timer.active)
          {
            text_pulse_timer.current++;
            if (text_pulse_timer.current == text_pulse_timer.period)
            {
              text_pulse_timer.current = 0;
            }
            var text_height = Math.round(35 + Math.cos(2 * Math.PI * text_pulse_timer.current / text_pulse_timer.period));
            ctx.font = "800 " + text_height + "px Arial";
            ctx.textAlign = "center";
            ctx.textBaseline = "middle";
            var button_text = "SET";
            var button_color = "rgb(224, 224, 224)";
            if (user_guessing_set)
            {
              button_color = "rgb(0, 0, 0)";
              button_text = "SET";
            }
            ctx.fillStyle = button_color;
            ctx.fillText(button_text, canvas_width / 2, canvas_height * .75);
          }

          if (display_life < user_life)
          {
            display_life++;
          }
          else if (display_life > user_life)
          {
            display_life -= 4;
            if (display_life < user_life)
            {
              display_life = user_life;
            }
          }
          ctx.fillStyle = "rgb(128, 0, 0)";
          ctx.fillRect(cell_width + random_x_jitter, 2 * cell_width + random_y_jitter, canvas_width - 2 * cell_width, cell_width);
          ctx.fillStyle = life_color;
          ctx.fillRect(cell_width + random_x_jitter, 2 * cell_width + random_y_jitter, (canvas_width - 2 * cell_width) * (display_life) / 100, cell_width);

          ctx.fillStyle = "rgb(255, 255, 255)";
          ctx.fillRect(16 * cell_width, 16 * cell_width, 2 * cell_width, 2 * cell_width);
          ctx.strokeStyle = "rgb(64, 64, 64)";
          ctx.lineWidth = 2;
          ctx.strokeRect(16 * cell_width, 16 * cell_width, 2 * cell_width, 2 * cell_width);
          ctx.fillStyle = "rgb(64, 64, 64)";
          ctx.fillRect(16 * cell_width + cell_width / 3, 16 * cell_width + 1 * cell_width / 4, cell_width / 3, 3 * cell_width / 2);
          ctx.fillRect(17 * cell_width + cell_width / 3, 16 * cell_width + 1 * cell_width / 4, cell_width / 3, 3 * cell_width / 2);
          
          ctx.fillStyle = "rgb(64,64,64)";
          ctx.textAlign = "start";
          ctx.textBaseline = "bottom";
          ctx.font = "800 " + 2 * cell_width + "px Arial";
          ctx.fillText(total_sets, cell_width, canvas_height - cell_width / 2);
          
          if (display_life == 0)
          {
            current_screen = GameOverScreen;
            return;
          }
        }
      };

      //---------------------------------------------------------------------
      function eventLoop()
      {
        var start_time = Date.now();

        if (mouse_click_pending)
        {
          mouse_click_pending = false;
          current_screen.handleMouseClick();
        }

        current_screen.paint();

        var end_time = Date.now();
        var comp_time = end_time - start_time;
        if (comp_time > 40 || comp_time < 0)
        {
          setTimeout(eventLoop, 0);
        }
        else
        {
          setTimeout(eventLoop, 40 - comp_time);
        }

      }

      // launch the game once the document is fully loaded
      $(document).ready(init);

      Assert.fixupMethodNames(this, "top_level");
    </script>

    <script>
      //#######################################################################
      // testing the game

      //-----------------------------------------------------------------------
      // simulate the WScript object for the testing library
      WScript = {
        log: "",
        Echo: function (text)
        {
          text = text.replace("&", "&amp;")
            .replace("<", "&lt;")
            .replace(">", "&gt;");
          this.log += "<Pre>" + text + "</Pre>";
          this.testOutput.innerHTML = this.log;
        },
        testOutput: document.getElementById("testOutput")
      };


      //-----------------------------------------------------------------------
      TestSuite = {

        //---------------------------------------------------------------------
        testAssignCards: function ()
        {
          var card1 = randomCard();
          var card2 = randomCard();
          assignCards(card2,card1);
          Assert.eq(cardsEqual(card1,card2), "cardsEqual(card1,card2)", true);
        },

        //---------------------------------------------------------------------
        testEvilRandomNeverTriggersDetectSet: function()
        {
          var cardSet = [];
          cardSet.push(randomCard());
          cardSet.push(randomCard());
          cardSet.push(randomCard());
          for(var i = 0; i < 100; ++i)
          {
            randomizeCard(cardSet[1]);
            randomizeCard(cardSet[2]);
            evilRandom(cardSet[0],cardSet[1],cardSet[2]);
            Assert.eq(detectSet(cardSet), "detectSet(cardSet)", false);
          }
        },

        //---------------------------------------------------------------------
        testCompletingCardAlwaysTriggersDetectSet: function()
        {
          var cardSet = [];
          cardSet.push(randomCard());
          cardSet.push(randomCard());
          cardSet.push(randomCard());
          for(var i = 0; i < 100; ++i)
          {
            randomizeCard(cardSet[1]);
            randomizeCard(cardSet[2]);
            completingCard(cardSet[0],cardSet[1],cardSet[2]);
            Assert.eq(detectSet(cardSet), "detectSet(cardSet)", true);
          }
        },

        //---------------------------------------------------------------------
        testEvilRandomCreatesDifferentCard: function ()
        {
          var old_card = randomCard();
          var cardSet = [];
          cardSet.push(randomCard());
          cardSet.push(randomCard());
          cardSet.push(randomCard());
          for(var i = 0; i < 100; ++i)
          {
            randomizeCard(cardSet[1]);
            randomizeCard(cardSet[2]);
            assignCards(old_card, cardSet[0]);
            evilRandom(cardSet[0],cardSet[1],cardSet[2]);
            Assert.eq(cardsEqual(cardSet[0],old_card), "cardsEqual(cardSet[0],old_card)", false);
          }       
        },
        
        //---------------------------------------------------------------------
        testRandomizeCardCreatesDifferentCard: function ()
        {
          var card1 = randomCard();
          var card2 = randomCard();
          for(var i = 0; i < 100; ++i)
          {
            assignCards(card2,card1);
            randomizeCard(card1);
            Assert.eq(cardsEqual(card1,card2), "cardsEqual(card1,card2)", false);
          }
        }
      };
      Assert.fixupMethodNames(TestSuite, "TestSuite");

      //-----------------------------------------------------------------------
      function runTests()
      {
        WScript.log = "";
        if (TestingUtil.test(TestSuite))
        {
          WScript.testOutput.style.color="limegreen";
        }
        else
        {
          WScript.testOutput.style.color="red";
        }
      }

      Assert.fixupMethodNames(this, "top_level");
    </script>
  </body>
</html>
